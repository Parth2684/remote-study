// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Instructor {
  id        String      @id @default(uuid())
  name      String
  email     String      @unique
  password  String
  classroom Classroom[]
  quizzes   Quiz[]
  messages  Message[]
}

model Student {
  id        String             @id @default(uuid())
  name      String
  email     String             @unique
  password  String
  classroom StudentClassroom[]
  quizAttempts  QuizAttempt[]
  messages   Message[]

}

model Classroom {
  id           String             @id @default(uuid())
  name         String
  instructorId String
  instructor   Instructor         @relation(fields: [instructorId], references: [id])
  students     StudentClassroom[]
  messages      Message[]
  quizzes     Quiz[]
}

model Message{
  id     String @id @default(uuid())
  content String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  classroomId   String
  classroom     Classroom   @relation(fields: [classroomId],references: [id],onDelete: Cascade)

  instructorId   String?
  instructor    Instructor?   @relation(fields: [instructorId],references: [id],onDelete: Cascade)

  studentId     String?
  student       Student?   @relation(fields: [studentId],references: [id],onDelete: Cascade)
}

model StudentClassroom {
  studentId   String
  classroomId String
  joinedAt    DateTime @default(now())

  student   Student   @relation(fields: [studentId], references: [id])
  classroom Classroom @relation(fields: [classroomId], references: [id])

  @@id([studentId, classroomId])
}

model Quiz {
  id  String @id  @default(uuid())
  title String  
  description String?
  instructorId  String
  classroomId String  
  classroom Classroom @relation(fields: [classroomId], references: [id])
  instructor Instructor @relation(fields: [instructorId], references: [id])
  questions Question[]
  quizAttempts  QuizAttempt[]
}

model Question {
  id String @id @default(uuid())
  text  String  
  quizId  String
  quiz    Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options Option[]
  quizAnswers QuizAnswer[]
}

model Option {
  id  String  @id @default(uuid())
  text  String
  isCorrect Boolean
  questionId  String
  question  Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOptions QuizAnswer[]
}

model QuizAttempt {
  id String @id @default(uuid())
  attemptedById String
  attemptedBy Student @relation(fields: [attemptedById], references: [id])
  quizAnswers QuizAnswer[]   
  quizId  String
  quiz  Quiz  @relation(fields: [quizId], references: [id])
  correctCount  Int
  totalCount  Int
}

model QuizAnswer {
  id  String  @id @default(uuid())
  questionId  String
  selectedOptionId  String?
  isCorrect Boolean
  quizAttemptId String
  question  Question  @relation(fields: [questionId], references: [id])
  selectedOption  Option?  @relation(fields: [selectedOptionId], references: [id])
  quizAttempt QuizAttempt @relation(fields: [quizAttemptId], references: [id])
}
